# -*- coding: utf-8 -*-
"""CODSOFT_task_1_Titanic_Survival_Predictions.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/shahjan49/CODSOFT/blob/main/CODSOFT_task_1_Titanic_Survival_Predictions.ipynb

Import Necessary Libraries.
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as snr
from sklearn.preprocessing import OneHotEncoder

"""Load Data and shows first 10 rows of data."""

data=pd.read_csv("/content/tested.csv")
data.head(10)

"""Drop Unnecessary values"""

data_new=data.drop(['PassengerId','Name','Cabin','Ticket'],axis=1)
data_new.head(10)

"""Calculates statistical values and rounds them to 3 decimal places."""

data_new.describe().round(3)

"""Mark null values as True and returns sum of number of True values in each column"""

data_new.isnull().sum()

"""Handling Null Values and Pre Processing the dataset."""

data_new['Age']=data_new['Age'].fillna(data_new['Age'].mean())
data_new['Fare']=data_new['Fare'].fillna(data_new['Fare'].mean())
data_new.isnull().sum()

"""Data Visualization"""

ax=data_new['Sex'].value_counts().plot(kind='bar',x = 'Survived',figsize=(6,5))    # creating coundplot
plt.title("Ratio of Male and Female passengers")
plt.ylabel("Count")
plt.xlabel("Sex")
plt.show()

ax=data_new['Survived'].value_counts().plot(kind='bar',figsize=(6,5))    # creating coundplot
plt.title("Survival Distribution (0: No, 1: Yes)")
plt.ylabel("Count")
plt.xlabel("Survived")
plt.show()

ax=data_new['Embarked'].value_counts().plot(kind='pie',figsize=(6,5),autopct='%1.1f%%')
plt.title("Distribution of Passengers by Embarked")
plt.legend(["Q", "S", "C"])
plt.show()

_, ax = plt.subplots(figsize = (8, 6))
snr.countplot(data = data_new, x = "Embarked", hue = "Survived", ax = ax)
ax.set_title("Countplot for Embarked with Survival")
ax.set_xlabel("Embarked")
ax.set_xticklabels(["Q", "S", "C"])
ax.set_ylabel("Number of passengers")
ax.legend(title = "Legends", labels = ["Not Survived", "Survived"])
plt.plot()

"""Change the catagorical data into numerical data by using OneHotEncoding."""

data_new['Sex']=data_new['Sex'].apply({'male':1,'female':0}.get)
data_new['Embarked']=data_new['Embarked'].apply({'S':1,'Q':2,'C':3}.get)
data_new.head()

"""Deviding the data into Dependent and Independent variables."""

x=data_new.drop(['Survived'],axis=1)
y=data_new['Survived']

"""Deviding the cleaned data into training and testing sets."""

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,train_size=0.8)

"""Creating first machine learning model 'k-nearest neighbour'."""

from sklearn.neighbors import KNeighborsClassifier
knn=KNeighborsClassifier(n_neighbors=5)

"""Train the model"""

knn.fit(x_train,y_train)

"""Make predictions on model"""

predictions=knn.predict(x_test)
print(predictions)

"""Check the Confusion metrix and Accuracy score."""

from sklearn.metrics import confusion_matrix, accuracy_score
ac=accuracy_score(y_test,predictions)
cm=confusion_matrix(y_test,predictions)

print(cm)

print(ac)

"""Creating Second Machine Learning Model 'Decision Tree'."""

from sklearn.tree import DecisionTreeClassifier
tree=DecisionTreeClassifier()

tree.fit(x_train,y_train)

predictions=tree.predict(x_test)
print(predictions)

"""Check the Confusion metrix and Accuracy score."""

from sklearn.metrics import confusion_matrix, accuracy_score
ac=accuracy_score(y_test,predictions)
cm=confusion_matrix(y_test,predictions)

print(cm)

print(ac)

"""Creating third machine learning model 'Support Vector Machine'."""

from sklearn.svm import SVC
svm=SVC()

svm.fit(x_train,y_train)

predictions=svm.predict(x_test)
print(predictions)

"""Check the Confusion metrix and Accuracy score."""

from sklearn.metrics import confusion_matrix, accuracy_score
ac=accuracy_score(y_test,predictions)
cm=confusion_matrix(y_test,predictions)

print(cm)

print(ac)